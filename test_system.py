#!/usr/bin/env python3
"""
Script de test complet pour v√©rifier le fonctionnement du syst√®me
Ex√©cutez ce fichier pour tester toutes les fonctionnalit√©s
"""

import os
import sys
import traceback
from datetime import datetime

# Ajouter le r√©pertoire courant au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """Test des imports"""
    print("üîç Test des imports...")
    try:
        from db import (init_db, ajouter_client, get_all_clients, rechercher_clients, 
                       modifier_client_complet, supprimer_client_definitif, get_statistiques)
        print("‚úÖ Imports r√©ussis")
        return True
    except Exception as e:
        print(f"‚ùå Erreur d'import: {e}")
        traceback.print_exc()
        return False

def test_database_init():
    """Test d'initialisation de la base de donn√©es"""
    print("\nüîç Test d'initialisation de la base de donn√©es...")
    try:
        from db import init_db
        init_db()
        print("‚úÖ Base de donn√©es initialis√©e")
        return True
    except Exception as e:
        print(f"‚ùå Erreur d'initialisation: {e}")
        traceback.print_exc()
        return False

def test_ajout_client_physique():
    """Test d'ajout de client physique"""
    print("\nüîç Test d'ajout de client physique...")
    try:
        from db import ajouter_client
        
        client_data = {
            'nom': 'MARTIN',
            'prenom': 'Pierre',
            'cin': 'AB123TEST',
            'telephone': '0600000123',
            'email': 'pierre.martin@test.com',
            'sexe': 'M'
        }
        
        result = ajouter_client(client_data, "physique")
        if result:
            print("‚úÖ Client physique ajout√© avec succ√®s")
            return True
        else:
            print("‚ùå √âchec de l'ajout du client physique")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ajout: {e}")
        traceback.print_exc()
        return False

def test_ajout_client_moral():
    """Test d'ajout de client moral"""
    print("\nüîç Test d'ajout de client moral...")
    try:
        from db import ajouter_client
        
        client_data = {
            'raison_sociale': 'ENTREPRISE TEST SARL',
            'ice': '1234567890123',
            'telephone': '0500000456',
            'email': 'contact@entreprise-test.ma',
            'forme_juridique': 'SARL'
        }
        
        result = ajouter_client(client_data, "moral")
        if result:
            print("‚úÖ Client moral ajout√© avec succ√®s")
            return True
        else:
            print("‚ùå √âchec de l'ajout du client moral")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ajout: {e}")
        traceback.print_exc()
        return False

def test_recuperation_clients():
    """Test de r√©cup√©ration des clients"""
    print("\nüîç Test de r√©cup√©ration des clients...")
    try:
        from db import get_all_clients
        
        # Test clients physiques
        clients_physiques = get_all_clients("physique")
        print(f"‚úÖ Clients physiques r√©cup√©r√©s: {len(clients_physiques)}")
        
        # Test clients moraux
        clients_moraux = get_all_clients("moral")
        print(f"‚úÖ Clients moraux r√©cup√©r√©s: {len(clients_moraux)}")
        
        return len(clients_physiques) > 0 or len(clients_moraux) > 0
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration: {e}")
        traceback.print_exc()
        return False

def test_recherche_clients():
    """Test de recherche de clients"""
    print("\nüîç Test de recherche de clients...")
    try:
        from db import rechercher_clients
        
        # Recherche dans clients physiques
        resultats_physiques = rechercher_clients("MARTIN", "physique")
        print(f"‚úÖ R√©sultats recherche physique: {len(resultats_physiques)}")
        
        # Recherche dans clients moraux
        resultats_moraux = rechercher_clients("ENTREPRISE", "moral")
        print(f"‚úÖ R√©sultats recherche moral: {len(resultats_moraux)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la recherche: {e}")
        traceback.print_exc()
        return False

def test_modification_client():
    """Test de modification de client"""
    print("\nüîç Test de modification de client...")
    try:
        from db import get_all_clients, modifier_client_complet
        
        # R√©cup√©rer un client existant
        clients = get_all_clients("physique")
        if not clients:
            print("‚ö†Ô∏è Aucun client physique pour tester la modification")
            return True
        
        client = clients[0]
        client_id = client['id']
        print(f"üìù Test modification du client ID: {client_id}")
        
        # Modifications √† appliquer
        modifications = {
            'email': 'email.modifie@test.com',
            'adresse': '123 Rue de la Modification, Test City'
        }
        
        # Effectuer la modification
        result = modifier_client_complet(client_id, modifications, "physique")
        
        if result:
            print("‚úÖ Modification r√©ussie")
            
            # V√©rifier que la modification a bien √©t√© appliqu√©e
            clients_apres = get_all_clients("physique")
            client_modifie = next((c for c in clients_apres if c['id'] == client_id), None)
            
            if client_modifie:
                print(f"üìß Email apr√®s modification: {client_modifie.get('email')}")
                print(f"üè† Adresse apr√®s modification: {client_modifie.get('adresse')}")
                
                # V√©rifier que les modifications ont √©t√© appliqu√©es
                email_ok = client_modifie.get('email') == modifications['email']
                adresse_ok = client_modifie.get('adresse') == modifications['adresse']
                
                if email_ok and adresse_ok:
                    print("‚úÖ V√©rification: modifications correctement appliqu√©es")
                    return True
                else:
                    print(f"‚ö†Ô∏è V√©rification: email OK={email_ok}, adresse OK={adresse_ok}")
                    return False
            else:
                print("‚ùå Client non trouv√© apr√®s modification")
                return False
        else:
            print("‚ùå √âchec de la modification")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la modification: {e}")
        traceback.print_exc()
        return False

def test_statistiques():
    """Test des statistiques"""
    print("\nüîç Test des statistiques...")
    try:
        from db import get_statistiques
        
        stats = get_statistiques()
        print(f"‚úÖ Statistiques r√©cup√©r√©es:")
        print(f"   - Clients physiques: {stats.get('clients_physiques', 0)}")
        print(f"   - Clients moraux: {stats.get('clients_moraux', 0)}")
        print(f"   - Total clients: {stats.get('total_clients', 0)}")
        print(f"   - Total contrats: {stats.get('total_contrats', 0)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des statistiques: {e}")
        traceback.print_exc()
        return False

def test_suppression_client():
    """Test de suppression de client (√† la fin)"""
    print("\nüîç Test de suppression de client...")
    try:
        from db import get_all_clients, supprimer_client_definitif
        
        # R√©cup√©rer les clients pour tester la suppression
        clients_physiques = get_all_clients("physique")
        clients_moraux = get_all_clients("moral")
        
        nb_suppressions = 0
        
        # Supprimer les clients de test cr√©√©s
        for client in clients_physiques:
            if client.get('cin') == 'AB123TEST':
                result = supprimer_client_definitif(client['id'])
                if result:
                    print(f"‚úÖ Client physique {client['id']} supprim√©")
                    nb_suppressions += 1
                else:
                    print(f"‚ùå √âchec suppression client physique {client['id']}")
        
        for client in clients_moraux:
            if client.get('ice') == '1234567890123':
                result = supprimer_client_definitif(client['id'])
                if result:
                    print(f"‚úÖ Client moral {client['id']} supprim√©")
                    nb_suppressions += 1
                else:
                    print(f"‚ùå √âchec suppression client moral {client['id']}")
        
        print(f"üìä Total suppressions: {nb_suppressions}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la suppression: {e}")
        traceback.print_exc()
        return False

def test_validation_fonctions():
    """Test des fonctions de validation"""
    print("\nüîç Test des fonctions de validation...")
    try:
        # Test validation email (si utils.py existe)
        try:
            from utils import valider_email, valider_cin, valider_ice
            
            # Test validation email
            assert valider_email("test@example.com") == True
            assert valider_email("invalid-email") == False
            print("‚úÖ Validation email fonctionnelle")
            
            # Test validation CIN
            assert valider_cin("AB123456") == True
            assert valider_cin("123") == False
            print("‚úÖ Validation CIN fonctionnelle")
            
            # Test validation ICE
            assert valider_ice("1234567890123") == True
            assert valider_ice("123") == False
            print("‚úÖ Validation ICE fonctionnelle")
            
        except ImportError:
            print("‚ö†Ô∏è Module utils.py non trouv√©, validation ignor√©e")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de validation: {e}")
        traceback.print_exc()
        return False

def main():
    """Fonction principale de test"""
    print("="*60)
    print("üöÄ D√âMARRAGE DES TESTS COMPLETS DU SYST√àME")
    print("="*60)
    print(f"üìÖ Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    tests = [
        ("Imports", test_imports),
        ("Initialisation DB", test_database_init),
        ("Ajout Client Physique", test_ajout_client_physique),
        ("Ajout Client Moral", test_ajout_client_moral),
        ("R√©cup√©ration Clients", test_recuperation_clients),
        ("Recherche Clients", test_recherche_clients),
        ("Modification Client", test_modification_client),
        ("Statistiques", test_statistiques),
        ("Validation", test_validation_fonctions),
        ("Suppression Client", test_suppression_client)
    ]
    
    resultats = []
    
    for nom_test, fonction_test in tests:
        try:
            print(f"\n{'='*20} {nom_test.upper()} {'='*20}")
            resultat = fonction_test()
            resultats.append((nom_test, resultat))
            
            if resultat:
                print(f"üéØ {nom_test}: SUCC√àS")
            else:
                print(f"üí• {nom_test}: √âCHEC")
                
        except Exception as e:
            print(f"üí• {nom_test}: ERREUR CRITIQUE - {e}")
            resultats.append((nom_test, False))
            traceback.print_exc()
    
    # R√©sum√© final
    print("\n" + "="*60)
    print("üìä R√âSUM√â DES TESTS")
    print("="*60)
    
    succes = 0
    echecs = 0
    
    for nom, resultat in resultats:
        status = "‚úÖ SUCC√àS" if resultat else "‚ùå √âCHEC"
        print(f"{nom:25} : {status}")
        
        if resultat:
            succes += 1
        else:
            echecs += 1
    
    print(f"\nüìà STATISTIQUES FINALES:")
    print(f"   ‚úÖ Tests r√©ussis: {succes}")
    print(f"   ‚ùå Tests √©chou√©s: {echecs}")
    print(f"   üìä Taux de r√©ussite: {(succes/(succes+echecs)*100):.1f}%")
    
    if echecs == 0:
        print("\nüéâ TOUS LES TESTS SONT PASS√âS ! Le syst√®me est fonctionnel.")
        print("üöÄ Vous pouvez maintenant lancer Streamlit avec: streamlit run votre_fichier.py")
    else:
        print(f"\n‚ö†Ô∏è {echecs} test(s) ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
    
    print("="*60)

if __name__ == "__main__":
    main()