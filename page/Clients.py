import streamlit as st
from db import (ajouter_client, rechercher_clients, supprimer_client_definitif, 
                modifier_client_complet, get_all_clients)
from utils import valider_cin, valider_ice, valider_email
import pandas as pd
from datetime import datetime, date, timedelta
import time
import hashlib
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
import io

# Configuration de la page avec style personnalis√©
def apply_custom_css():
    """Appliquer des styles CSS personnalis√©s"""
    st.markdown("""
    <style>
    /* Style g√©n√©ral */
    .main {
        padding-top: 1rem;
    }
    
    /* Style pour les titres */
    .title-container {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .title-text {
        color: white;
        font-size: 2.5rem;
        font-weight: bold;
        margin: 0;
        text-align: center;
    }
    
    /* Style pour les cartes statistiques */
    .stats-card {
        background: rgb(237, 225, 207);
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        border-left: 4px solid #667eea;
        margin-bottom: 1rem;
    }
    
    .stats-number {
        font-size: 2rem;
        font-weight: bold;
        color: #667eea;
        margin: 0;
    }
    
    .stats-label {
        color: #666;
        margin: 0;
        font-size: 0.9rem;
    }
    
    /* Style pour les formulaires */
    .form-container {
        background: #f8f9fa;
        padding: 2rem;
        border-radius: 10px;
        border: 1px solid #e9ecef;
        margin-bottom: 2rem;
    }
    
    /* Style pour les boutons */
    .stButton > button {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 5px;
        padding: 0.5rem 1rem;
        font-weight: bold;
        transition: all 0.3s ease;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
    
    /* Style pour les alertes */
    .alert-success {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        color: #155724;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .alert-error {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        color: #721c24;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    /* Style pour la modification */
    .edit-form {
        background: #f0f7ff;
        border: 2px solid #667eea;
        border-radius: 10px;
        padding: 1.5rem;
        margin: 1rem 0;
    }

       /* Style pour les onglets */
    .stTabs [data-baseweb="tab-list"] {
        gap: 2px;
    }
    
    .stTabs [data-baseweb="tab"] {
        background: rgb(237, 225, 207);
        border-radius: 5px 5px 0 0;
        padding: 1rem 2rem;
        font-weight: bold;
    }
    
    .stTabs [aria-selected="true"] {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        color: white;
    }
    </style>
    """, unsafe_allow_html=True)

def safe_get_clients(type_client):
    """R√©cup√©rer les clients de mani√®re s√©curis√©e avec tri par ID croissant"""
    try:
        clients = get_all_clients(type_client)
        if clients is None:
            return []
        if not isinstance(clients, list):
            return []
        
        # Trier par ID croissant
        clients_sorted = sorted(clients, key=lambda x: x.get('id', 0) if isinstance(x, dict) else 0)
        return clients_sorted
        
    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration des clients {type_client}: {str(e)}")
        return []

def get_client_by_id_safe(client_id, client_type):
    """R√©cup√©rer un client par ID de mani√®re s√©curis√©e"""
    try:
        clients = safe_get_clients(client_type)
        for client in clients:
            if isinstance(client, dict) and client.get('id') == client_id:
                return client
        return None
    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration du client: {str(e)}")
        return None

def show_stats():
    """Afficher les statistiques des clients"""
    try:
        clients_physiques = safe_get_clients("physique")
        clients_moraux = safe_get_clients("moral")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            nb_physiques = len(clients_physiques) if clients_physiques else 0
            st.markdown(f"""
            <div class="stats-card">
                <p class="stats-number">{nb_physiques}</p>
                <p class="stats-label"> Clients Physiques</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            nb_moraux = len(clients_moraux) if clients_moraux else 0
            st.markdown(f"""
            <div class="stats-card">
                <p class="stats-number">{nb_moraux}</p>
                <p class="stats-label"> Clients Moraux</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            total = nb_physiques + nb_moraux
            st.markdown(f"""
            <div class="stats-card">
                <p class="stats-number">{total}</p>
                <p class="stats-label"> Total Clients</p>
            </div>
            """, unsafe_allow_html=True)
            
    except Exception as e:
        st.error(f"Erreur lors du chargement des statistiques: {str(e)}")

def modifier_client_physique_interface(client_id):
    """Interface compl√®te de modification d'un client physique - INSPIR√âE DE LA GESTION CONTRATS"""
    # R√©cup√©rer les donn√©es du client
    client = get_client_by_id_safe(client_id, "physique")
    
    if not client:
        st.error("‚úó Client non trouv√©")
        return
    
    st.markdown(f"###  Modification du Client: {client['nom']} {client['prenom']}")
    
    # Afficher les informations actuelles
    with st.expander("üóé Informations Actuelles", expanded=False):
        st.write(f"**ID:** {client.get('id')}")
        st.write(f"**Nom complet:** {client.get('nom', '')} {client.get('prenom', '')}")
        st.write(f"**CIN:** {client.get('cin', '')}")
        st.write(f"**T√©l√©phone:** {client.get('telephone', '')}")
        st.write(f"**Email:** {client.get('email', 'Non d√©fini')}")
        st.write(f"**Sexe:** {client.get('sexe', 'Non d√©fini')}")
        st.write(f"**Date naissance:** {client.get('date_naissance', 'Non d√©finie')}")
        st.write(f"**Adresse:** {client.get('adresse', 'Non d√©finie')}")
    
    # Formulaire de modification avec toutes les informations modifiables
    with st.form(f"form_modifier_client_{client_id}"):
        st.markdown("#### üóé Nouvelles Informations")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("** Informations Personnelles**")
            nom = st.text_input(
                "Nom *",
                value=str(client.get('nom', '')),
                max_chars=50,
                help="Nom de famille du client"
            )
            
            prenom = st.text_input(
                "Pr√©nom *",
                value=str(client.get('prenom', '')),
                max_chars=50,
                help="Pr√©nom du client"
            )
            
            cin = st.text_input(
                "CIN *",
                value=str(client.get('cin', '')),
                max_chars=20,
                help="Carte d'identit√© nationale"
            )
            
            # Gestion du sexe avec valeur actuelle
            sexe_options = ["", "M", "F", "Autre"]
            current_sexe = str(client.get('sexe', ''))
            sexe_index = 0
            if current_sexe in sexe_options:
                sexe_index = sexe_options.index(current_sexe)
            
            sexe = st.selectbox(
                "Sexe",
                sexe_options,
                index=sexe_index,
                help="Sexe du client"
            )
        
        with col2:
            st.markdown("**‚úÜ Contact et Adresse**")
            telephone = st.text_input(
                "T√©l√©phone *",
                value=str(client.get('telephone', '')),
                max_chars=20,
                help="Num√©ro de t√©l√©phone"
            )
            
            email = st.text_input(
                "Email",
                value=str(client.get('email', '') if client.get('email') else ''),
                max_chars=100,
                help="Adresse email (optionnel)"
            )
            
            # Gestion de la date de naissance avec valeur actuelle
            date_naissance_value = None
            date_str = client.get('date_naissance', '')
            if date_str:
                try:
                    if isinstance(date_str, str):
                        # Essayer plusieurs formats
                        for fmt in ['%Y-%m-%d', '%d/%m/%Y', '%Y-%m-%d %H:%M:%S']:
                            try:
                                date_naissance_value = datetime.strptime(date_str, fmt).date()
                                break
                            except ValueError:
                                continue
                    elif hasattr(date_str, 'date'):
                        date_naissance_value = date_str.date()
                except Exception:
                    pass
            
            current_year = datetime.now().year
            date_naissance = st.date_input(
                "Date de Naissance",
                value=date_naissance_value,
                min_value=date(1900, 1, 1),
                max_value=date(current_year, 12, 31),
                help="Date de naissance du client"
            )
            
            adresse = st.text_area(
                "Adresse",
                value=str(client.get('adresse', '') if client.get('adresse') else ''),
                max_chars=200,
                height=100,
                help="Adresse compl√®te"
            )
        
        # Boutons d'action
        st.markdown("---")
        col1, col2, col3 = st.columns([2, 1, 1])
        
        with col1:
            submit = st.form_submit_button("üíæ Sauvegarder les Modifications", use_container_width=True)
        
        with col2:
            if st.form_submit_button("‚ü≤ R√©initialiser", use_container_width=True):
                st.rerun()
        
        with col3:
            if st.form_submit_button("‚úó Annuler", use_container_width=True):
                if 'editing_client_id' in st.session_state:
                    del st.session_state['editing_client_id']
                if 'editing_client_type' in st.session_state:
                    del st.session_state['editing_client_type']
                st.rerun()
        
        if submit:
            # Validation des donn√©es
            erreurs = []
            
            if not nom.strip():
                erreurs.append("Le nom est obligatoire")
            elif len(nom.strip()) < 2:
                erreurs.append("Le nom doit contenir au moins 2 caract√®res")
                
            if not prenom.strip():
                erreurs.append("Le pr√©nom est obligatoire")
            elif len(prenom.strip()) < 2:
                erreurs.append("Le pr√©nom doit contenir au moins 2 caract√®res")
                
            if not cin.strip():
                erreurs.append("La CIN est obligatoire")
            elif not valider_cin(cin.strip()):
                erreurs.append("Format CIN invalide")
                
            if not telephone.strip():
                erreurs.append("Le t√©l√©phone est obligatoire")
            elif len(telephone.strip()) < 10:
                erreurs.append("Le num√©ro de t√©l√©phone doit contenir au moins 10 chiffres")
                
            if email and email.strip() and not valider_email(email.strip()):
                erreurs.append("Format email invalide")
            
            if erreurs:
                for erreur in erreurs:
                    st.error(f"‚úó {erreur}")
            else:
                # Pr√©parer les modifications avec normalisation
                modifications = {
                    'nom': nom.strip().title(),
                    'prenom': prenom.strip().title(),
                    'cin': cin.strip().upper(),
                    'telephone': telephone.strip(),
                    'sexe': sexe if sexe else '',
                    'email': email.strip().lower() if email.strip() else '',
                    'adresse': adresse.strip() if adresse.strip() else '',
                    'date_naissance': str(date_naissance) if date_naissance else ''
                }
                
                # Effectuer la modification
                with st.spinner("üíæ Sauvegarde en cours..."):
                    success = modifier_client_complet(client_id, modifications, "physique")
                    
                    if success:
                        st.success("‚úÖ Client modifi√© avec succ√®s!")
                        
                        # Nettoyer l'√©tat et rediriger
                        if 'editing_client_id' in st.session_state:
                            del st.session_state['editing_client_id']
                        if 'editing_client_type' in st.session_state:
                            del st.session_state['editing_client_type']
                        
                        time.sleep(1.5)
                        st.rerun()
                    else:
                        st.error("‚úó Erreur lors de la modification du client")

def modifier_client_moral_interface(client_id):
    """Interface compl√®te de modification d'un client moral - INSPIR√âE DE LA GESTION CONTRATS"""
    # R√©cup√©rer les donn√©es du client
    client = get_client_by_id_safe(client_id, "moral")
    
    if not client:
        st.error("‚úó Client non trouv√©")
        return
    
    st.markdown(f"###  Modification de l'Entreprise: {client['raison_sociale']}")
    
    # Afficher les informations actuelles
    with st.expander("üóé Informations Actuelles", expanded=False):
        st.write(f"**ID:** {client.get('id')}")
        st.write(f"**Raison sociale:** {client.get('raison_sociale', '')}")
        st.write(f"**ICE:** {client.get('ice', '')}")
        st.write(f"**RC:** {client.get('rc', 'Non d√©fini')}")
        st.write(f"**Forme juridique:** {client.get('forme_juridique', 'Non d√©finie')}")
        st.write(f"**T√©l√©phone:** {client.get('telephone', '')}")
        st.write(f"**Email:** {client.get('email', 'Non d√©fini')}")
        st.write(f"**Adresse:** {client.get('adresse', 'Non d√©finie')}")
        
        # Repr√©sentant l√©gal
        if any([client.get('rep_nom'), client.get('rep_prenom'), client.get('rep_cin')]):
            st.write("**Repr√©sentant l√©gal:**")
            st.write(f"  - Nom: {client.get('rep_nom', 'Non d√©fini')}")
            st.write(f"  - Pr√©nom: {client.get('rep_prenom', 'Non d√©fini')}")
            st.write(f"  - CIN: {client.get('rep_cin', 'Non d√©fini')}")
            st.write(f"  - Qualit√©: {client.get('rep_qualite', 'Non d√©finie')}")
    
    # Formulaire de modification avec toutes les informations modifiables
    with st.form(f"form_modifier_client_moral_{client_id}"):
        st.markdown("#### üóé Nouvelles Informations")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("** Informations Entreprise**")
            raison_sociale = st.text_input(
                "Raison Sociale *",
                value=str(client.get('raison_sociale', '')),
                max_chars=100,
                help="Nom officiel de l'entreprise"
            )
            
            ice = st.text_input(
                "ICE *",
                value=str(client.get('ice', '')),
                max_chars=20,
                help="Identifiant Commun de l'Entreprise"
            )
            
            rc = st.text_input(
                "Registre Commerce",
                value=str(client.get('rc', '') if client.get('rc') else ''),
                max_chars=50,
                help="Num√©ro au registre de commerce"
            )
            
            # Gestion de la forme juridique avec valeur actuelle
            forme_options = ["", "SARL", "SA", "SARL-AU", "SNC", "SCS", "GIE", "Association", "Coop√©rative", "Autre"]
            current_forme = str(client.get('forme_juridique', ''))
            forme_index = 0
            if current_forme in forme_options:
                forme_index = forme_options.index(current_forme)
            
            forme_juridique = st.selectbox(
                "Forme Juridique",
                forme_options,
                index=forme_index,
                help="Statut juridique de l'entreprise"
            )
        
        with col2:
            st.markdown("**‚úÜ Contact**")
            telephone = st.text_input(
                "T√©l√©phone *",
                value=str(client.get('telephone', '')),
                max_chars=20,
                help="Num√©ro de t√©l√©phone principal"
            )
            
            email = st.text_input(
                "Email",
                value=str(client.get('email', '') if client.get('email') else ''),
                max_chars=100,
                help="Adresse email professionnelle"
            )
            
            adresse = st.text_area(
                "Adresse",
                value=str(client.get('adresse', '') if client.get('adresse') else ''),
                max_chars=200,
                height=100,
                help="Adresse du si√®ge social"
            )
        
        # Repr√©sentant l√©gal modifiable
        st.markdown("#### üë§ Repr√©sentant L√©gal")
        col3, col4 = st.columns(2)
        
        with col3:
            rep_nom = st.text_input(
                "Nom du Repr√©sentant",
                value=str(client.get('rep_nom', '') if client.get('rep_nom') else ''),
                max_chars=50,
                help="Nom du repr√©sentant l√©gal"
            )
            
            rep_prenom = st.text_input(
                "Pr√©nom du Repr√©sentant",
                value=str(client.get('rep_prenom', '') if client.get('rep_prenom') else ''),
                max_chars=50,
                help="Pr√©nom du repr√©sentant l√©gal"
            )
        
        with col4:
            rep_cin = st.text_input(
                "CIN du Repr√©sentant",
                value=str(client.get('rep_cin', '') if client.get('rep_cin') else ''),
                max_chars=20,
                help="CIN du repr√©sentant l√©gal"
            )
            
            rep_qualite = st.text_input(
                "Qualit√© (G√©rant, PDG...)",
                value=str(client.get('rep_qualite', '') if client.get('rep_qualite') else ''),
                max_chars=50,
                help="Fonction du repr√©sentant"
            )
        
        # Boutons d'action
        st.markdown("---")
        col1, col2, col3 = st.columns([2, 1, 1])
        
        with col1:
            submit = st.form_submit_button("üíæ Sauvegarder les Modifications", use_container_width=True)
        
        with col2:
            if st.form_submit_button("‚ü≤ R√©initialiser", use_container_width=True):
                st.rerun()
        
        with col3:
            if st.form_submit_button("‚úó Annuler", use_container_width=True):
                if 'editing_client_id' in st.session_state:
                    del st.session_state['editing_client_id']
                if 'editing_client_type' in st.session_state:
                    del st.session_state['editing_client_type']
                st.rerun()
        
        if submit:
            # Validation des donn√©es
            erreurs = []
            
            if not raison_sociale.strip():
                erreurs.append("La raison sociale est obligatoire")
            elif len(raison_sociale.strip()) < 3:
                erreurs.append("La raison sociale doit contenir au moins 3 caract√®res")
                
            if not ice.strip():
                erreurs.append("L'ICE est obligatoire")
            elif not valider_ice(ice.strip()):
                erreurs.append("Format ICE invalide")
                
            if not telephone.strip():
                erreurs.append("Le t√©l√©phone est obligatoire")
            elif len(telephone.strip()) < 10:
                erreurs.append("Le num√©ro de t√©l√©phone doit contenir au moins 10 chiffres")
                
            if email and email.strip() and not valider_email(email.strip()):
                erreurs.append("Format email invalide")
                
            if rep_cin and rep_cin.strip() and not valider_cin(rep_cin.strip()):
                erreurs.append("Format CIN du repr√©sentant invalide")
            
            if erreurs:
                for erreur in erreurs:
                    st.error(f"‚úó {erreur}")
            else:
                # Pr√©parer les modifications avec normalisation
                modifications = {
                    'raison_sociale': raison_sociale.strip().title(),
                    'ice': ice.strip().upper(),
                    'telephone': telephone.strip(),
                    'rc': rc.strip() if rc.strip() else '',
                    'forme_juridique': forme_juridique if forme_juridique else '',
                    'email': email.strip().lower() if email.strip() else '',
                    'adresse': adresse.strip() if adresse.strip() else '',
                    'rep_nom': rep_nom.strip().title() if rep_nom.strip() else '',
                    'rep_prenom': rep_prenom.strip().title() if rep_prenom.strip() else '',
                    'rep_cin': rep_cin.strip().upper() if rep_cin.strip() else '',
                    'rep_qualite': rep_qualite.strip().title() if rep_qualite.strip() else ''
                }
                
                # Effectuer la modification
                with st.spinner("üíæ Sauvegarde en cours..."):
                    success = modifier_client_complet(client_id, modifications, "moral")
                    
                    if success:
                        st.success("‚úÖ Entreprise modifi√©e avec succ√®s!")

                        
                        # Nettoyer l'√©tat et rediriger
                        if 'editing_client_id' in st.session_state:
                            del st.session_state['editing_client_id']
                        if 'editing_client_type' in st.session_state:
                            del st.session_state['editing_client_type']
                        
                        time.sleep(1.5)
                        st.rerun()
                    else:
                        st.error("‚úó Erreur lors de la modification de l'entreprise")

def show_client_details_enhanced(client_data, type_client):
    """Affichage des d√©tails du client avec plus d'informations"""
    
    st.markdown(f"### üóé Profil Complet - Client ID: {client_data['id']}")
    
    if type_client == "physique":
        # Informations principales
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### ‚ö≤‚ö≤ Informations Personnelles")
            st.info(f"""
            **Nom complet:** {client_data.get('nom', 'N/A')} {client_data.get('prenom', 'N/A')}  
            **CIN:** `{client_data.get('cin', 'Non d√©fini')}`  
            **Sexe:** {client_data.get('sexe', 'Non sp√©cifi√©')}  
            **Date de naissance:** {client_data.get('date_naissance', 'Non sp√©cifi√©e')}
            """)


        
        with col2:
            st.markdown("#### ‚úÜ Informations de Contact")
            telephone = client_data.get('telephone', 'Non d√©fini')
            email = client_data.get('email', 'Non d√©fini')
            adresse = client_data.get('adresse', 'Non sp√©cifi√©e')
            
            st.info(f"""
            **T√©l√©phone:** `{telephone}`  
            **Email:** {email}  
            **Adresse:** {adresse}
            """)
        
        # Calculer l'√¢ge si date de naissance disponible
       
    
    else:  # Client moral
        # Informations principales
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("####  Informations Entreprise")
            st.info(f"""
            **Raison sociale:** {client_data.get('raison_sociale', 'N/A')}  
            **ICE:** `{client_data.get('ice', 'Non d√©fini')}`  
            **RC:** `{client_data.get('rc', 'Non d√©fini')}`  
            **Forme juridique:** {client_data.get('forme_juridique', 'Non sp√©cifi√©e')}
            """)
        
        with col2:
            st.markdown("#### ‚úÜ Informations de Contact")
            telephone = client_data.get('telephone', 'Non d√©fini')
            email = client_data.get('email', 'Non d√©fini')
            adresse = client_data.get('adresse', 'Non sp√©cifi√©e')
            
            st.info(f"""
            **T√©l√©phone:** `{telephone}`  
            **Email:** {email}  
            **Adresse:** {adresse}
            """)
        
        # Repr√©sentant l√©gal si disponible
        if any([client_data.get('rep_nom'), client_data.get('rep_prenom'), client_data.get('rep_cin')]):
            st.markdown("#### üë§ Repr√©sentant L√©gal")
            st.success(f"""
            **Nom:** {client_data.get('rep_nom', 'Non sp√©cifi√©')}  
            **Pr√©nom:** {client_data.get('rep_prenom', 'Non sp√©cifi√©')}  
            **CIN:** `{client_data.get('rep_cin', 'Non sp√©cifi√©')}`  
            **Qualit√©:** {client_data.get('rep_qualite', 'Non sp√©cifi√©e')}
            """)
    
    # Informations syst√®me
    st.markdown("#### ‚è± Informations Syst√®me")
    date_creation = client_data.get('date_creation', 'Non d√©finie')
    st.warning(f"**Date de cr√©ation:** {date_creation}")
    
    # Statistiques et √©l√©ments associ√©s
    st.markdown("---")
    st.markdown("####  √âl√©ments Associ√©s")
    
    try:
        from db import get_db_connection
        conn = get_db_connection()
        
        # Compter les contrats
        contrats = conn.execute(
            "SELECT COUNT(*) as count FROM contrats WHERE client_id = ? AND client_type = ?",
            (client_data['id'], type_client)
        ).fetchone()
        
        # Compter les factures  
        factures = conn.execute(
            "SELECT COUNT(*) as count FROM factures WHERE client_id = ?",
            (client_data['id'],)
        ).fetchone()
        
        conn.close()
        
        col1, col2 = st.columns(2)
        
        with col1:
            nb_contrats = contrats['count'] if contrats else 0
            st.metric("üóé Contrats", nb_contrats)
        
        with col2:
            nb_factures = factures['count'] if factures else 0
            st.metric("üßæ Factures", nb_factures)
        
        total_elements = nb_contrats + nb_factures
        if total_elements > 0:
            st.warning(f"‚ö†Ô∏è Ce client a {total_elements} √©l√©ment(s) associ√©(s)")
        else:
            st.success("‚úÖ Aucun √©l√©ment associ√©")
            
    except Exception as e:
        st.error(f"‚úó Erreur lors du chargement des √©l√©ments associ√©s: {str(e)}")
    
    # Bouton de retour
    st.markdown("---")
    if st.button(" Retour √† la liste", use_container_width=True, key="back_from_details"):
        if 'editing_client_id' in st.session_state:
            del st.session_state['editing_client_id']
        if 'editing_client_type' in st.session_state:
            del st.session_state['editing_client_type']
        st.rerun()

def show_delete_confirmation_enhanced(client_data, type_client):
    """Confirmation de suppression s√©curis√©e"""
    
    st.markdown(f"###  Confirmation de Suppression - ID: {client_data['id']}")
    
    # Informations du client √† supprimer
    if type_client == "physique":
        st.error(f"""
        ** Client √† supprimer:**
        - **Nom complet:** {client_data.get('nom')} {client_data.get('prenom')}
        - **CIN:** {client_data.get('cin')}
        - **T√©l√©phone:** {client_data.get('telephone')}
        - **Email:** {client_data.get('email', 'Non d√©fini')}
        """)
    else:
        st.error(f"""
        ** Entreprise √† supprimer:**
        - **Raison sociale:** {client_data.get('raison_sociale')}
        - **ICE:** {client_data.get('ice')}
        - **T√©l√©phone:** {client_data.get('telephone')}
        - **Email:** {client_data.get('email', 'Non d√©fini')}
        """)
    
    # V√©rifications de s√©curit√©
    st.warning("‚ö†Ô∏è **ATTENTION: Cette action est irr√©versible !**")
    
    try:
        from db import get_db_connection
        conn = get_db_connection()
        
        # V√©rifier les √©l√©ments associ√©s
        contrats = conn.execute(
            "SELECT COUNT(*) as count FROM contrats WHERE client_id = ? AND client_type = ?",
            (client_data['id'], type_client)
        ).fetchone()
        
        factures = conn.execute(
            "SELECT COUNT(*) as count FROM factures WHERE client_id = ?",
            (client_data['id'],)
        ).fetchone()
        
        conn.close()
        
        nb_contrats = contrats['count'] if contrats else 0
        nb_factures = factures['count'] if factures else 0
        
        if nb_contrats > 0 or nb_factures > 0:
            st.error(f"""
            **‚äò Suppression impossible !**
            
            Ce client est associ√© √† :
            - **{nb_contrats}** contrat(s)
            - **{nb_factures}** facture(s)
            
            Vous devez d'abord supprimer/transf√©rer ces √©l√©ments.
            """)
            
            if st.button("üîô Revenir", use_container_width=True):
                if 'editing_client_id' in st.session_state:
                    del st.session_state['editing_client_id']
                if 'editing_client_type' in st.session_state:
                    del st.session_state['editing_client_type']
                st.rerun()
            return
        else:
            st.success("‚úÖ Aucun √©l√©ment associ√© trouv√©. La suppression est possible.")
        
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Impossible de v√©rifier les √©l√©ments associ√©s: {str(e)}")
    
    # Interface de confirmation s√©curis√©e
    # st.markdown("### üîê Confirmation S√©curis√©e")
    
    confirmation_text = "SUPPRIMER"
    user_confirmation = st.text_input(
        f"Tapez **{confirmation_text}** pour confirmer:",
        placeholder=confirmation_text,
        help="Cette v√©rification √©vite les suppressions accidentelles"
    )
    
    confirmation_valide = user_confirmation.upper() == confirmation_text
    
    if confirmation_valide:
        st.success("‚úÖ Confirmation valid√©e")
    elif user_confirmation:
        st.error("‚úó Texte de confirmation incorrect")
    
    # Boutons d'action finaux
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("‚úÖ CONFIRMER LA SUPPRESSION", 
                    use_container_width=True,
                    type="primary",
                    disabled=not confirmation_valide):
            
            if confirmation_valide:
                with st.spinner(" Suppression en cours..."):
                    success = supprimer_client_definitif(client_data['id'])
                    
                    if success:
                        st.success("‚úÖ Client supprim√© avec succ√®s !")
                    
                        
                        # Nettoyer l'√©tat
                        if 'editing_client_id' in st.session_state:
                            del st.session_state['editing_client_id']
                        if 'editing_client_type' in st.session_state:
                            del st.session_state['editing_client_type']
                        
                        time.sleep(2)
                        st.rerun()
                    else:
                        st.error("‚úó Erreur lors de la suppression")
    
    with col2:
        if st.button(" Annuler", use_container_width=True):
            if 'editing_client_id' in st.session_state:
                del st.session_state['editing_client_id']
            if 'editing_client_type' in st.session_state:
                del st.session_state['editing_client_type']
            st.rerun()

def gestion_clients_physiques():
    """Gestion des clients physiques avec interface am√©lior√©e"""
    st.markdown("###  Gestion des Clients Physiques")
    
    # V√©rifier s'il y a une modification en cours
    if st.session_state.get('editing_client_id') and st.session_state.get('editing_client_type') == 'physique':
        client_id = st.session_state['editing_client_id']
        action = st.session_state.get('editing_action', 'edit')
        
        if action == 'edit':
            modifier_client_physique_interface(client_id)
            return
        elif action == 'delete':
            client_data = get_client_by_id_safe(client_id, "physique")
            if client_data:
                show_delete_confirmation_enhanced(client_data, "physique")
                return
        elif action == 'view':
            client_data = get_client_by_id_safe(client_id, "physique")
            if client_data:
                show_client_details_enhanced(client_data, "physique")
                return
    
    # Formulaire d'ajout (reste identique)
    with st.expander("‚ûï Ajouter un Nouveau Client Physique", expanded=False):
        with st.form("form_client_physique", clear_on_submit=True):
            st.markdown("#### üóé Informations Personnelles")
            col1, col2 = st.columns(2)
            
            with col1:
                nom = st.text_input("Nom *", max_chars=50, help="Nom de famille du client")
                prenom = st.text_input("Pr√©nom *", max_chars=50, help="Pr√©nom du client")
                cin = st.text_input("CIN *", max_chars=20, help="Carte d'identit√© nationale")
                sexe = st.selectbox("Sexe", ["", "M", "F", "Autre"], help="Sexe du client")
            
            with col2:
                telephone = st.text_input("T√©l√©phone *", max_chars=20, help="Num√©ro de t√©l√©phone")
                email = st.text_input("Email", max_chars=100, help="Adresse email (optionnel)")
                
                current_year = datetime.now().year
                date_naissance = st.date_input(
                    "Date de Naissance", 
                    value=None, 
                    min_value=date(1900, 1, 1),
                    max_value=date(current_year, 12, 31),
                    help="Date de naissance du client"
                )
                
                adresse = st.text_area("Adresse", max_chars=200, help="Adresse compl√®te")
            
            submitted = st.form_submit_button("üíæ Enregistrer le Client", use_container_width=True)
            
            if submitted:
                handle_client_physique_submission(nom, prenom, cin, telephone, sexe, email, date_naissance, adresse)
    
    # Liste et actions des clients
    st.markdown("---")
    st.markdown("### üóé Liste des Clients Physiques")
    
    # Barre de recherche
    col1, col2 = st.columns([3, 1])
    with col1:
        search_term = st.text_input(
            " Rechercher un client", 
            placeholder="ID, nom, pr√©nom, CIN ou t√©l√©phone...",
            key="search_physique"
        )
    with col2:
        refresh_btn = st.button("‚ü≤ Actualiser", use_container_width=True, key="refresh_physique")
    
    # R√©cup√©rer et afficher les clients
    try:
        if search_term and search_term.strip():
            if search_term.strip().isdigit():
                # Recherche par ID
                client_id = int(search_term.strip())
                client = get_client_by_id_safe(client_id, "physique")
                clients = [client] if client else []
            else:
                # Recherche textuelle
                clients = rechercher_clients(search_term.strip(), "physique")
        else:
            clients = safe_get_clients("physique")
        
        if not clients:
            st.info("‚ÑπÔ∏è Aucun client trouv√©")
            return
        
        # Afficher le tableau
        df = pd.DataFrame(clients)
        
        if not df.empty:
            # R√©organiser les colonnes
            columns_order = ['id', 'nom', 'prenom', 'cin', 'telephone', 'email', 'sexe']
            existing_columns = [col for col in columns_order if col in df.columns]
            df_display = df[existing_columns].fillna('')
            
            st.dataframe(
                df_display, 
                use_container_width=True, 
                hide_index=True,
                column_config={
                    "id": st.column_config.NumberColumn("ID", width="small"),
                    "nom": st.column_config.TextColumn("Nom", width="medium"),
                    "prenom": st.column_config.TextColumn("Pr√©nom", width="medium"),
                    "cin": st.column_config.TextColumn("CIN", width="medium"),
                    "telephone": st.column_config.TextColumn("T√©l√©phone", width="medium"),
                    "email": st.column_config.TextColumn("Email", width="large"),
                    "sexe": st.column_config.TextColumn("Sexe", width="small")
                }
            )
            
            # Actions sur les clients
            show_client_actions_enhanced(clients, "physique")
        
    except Exception as e:
        st.error(f"‚úó Erreur lors du chargement: {str(e)}")

def gestion_clients_moraux():
    """Gestion des clients moraux avec interface am√©lior√©e"""
    st.markdown("###  Gestion des Clients Moraux")
    
    # V√©rifier s'il y a une modification en cours
    if st.session_state.get('editing_client_id') and st.session_state.get('editing_client_type') == 'moral':
        client_id = st.session_state['editing_client_id']
        action = st.session_state.get('editing_action', 'edit')
        
        if action == 'edit':
            modifier_client_moral_interface(client_id)
            return
        elif action == 'delete':
            client_data = get_client_by_id_safe(client_id, "moral")
            if client_data:
                show_delete_confirmation_enhanced(client_data, "moral")
                return
        elif action == 'view':
            client_data = get_client_by_id_safe(client_id, "moral")
            if client_data:
                show_client_details_enhanced(client_data, "moral")
                return
    
    # Formulaire d'ajout (reste identique)
    with st.expander("‚ûï Ajouter une Nouvelle Entreprise", expanded=False):
        with st.form("form_client_moral", clear_on_submit=True):
            st.markdown("#### üóé Informations de l'Entreprise")
            col1, col2 = st.columns(2)
            
            with col1:
                raison_sociale = st.text_input("Raison Sociale *", max_chars=100)
                ice = st.text_input("ICE *", max_chars=20)
                rc = st.text_input("Registre Commerce", max_chars=50)
                forme_juridique = st.selectbox("Forme Juridique", [
                    "", "SARL", "SA", "SARL-AU", "SNC", "SCS", "GIE", "Association", "Coop√©rative", "Autre"
                ])
            
            with col2:
                telephone = st.text_input("T√©l√©phone *", max_chars=20)
                email = st.text_input("Email", max_chars=100)
                adresse = st.text_area("Adresse", max_chars=200)
            
            # Repr√©sentant l√©gal
            st.markdown("#### ‚ö≤‚ö≤ Repr√©sentant L√©gal")
            col3, col4 = st.columns(2)
            
            with col3:
                rep_nom = st.text_input("Nom du Repr√©sentant", max_chars=50)
                rep_prenom = st.text_input("Pr√©nom du Repr√©sentant", max_chars=50)
            
            with col4:
                rep_cin = st.text_input("CIN du Repr√©sentant", max_chars=20)
                rep_qualite = st.text_input("Qualit√© (G√©rant, PDG...)", max_chars=50)
            
            submitted = st.form_submit_button("üíæ Enregistrer l'Entreprise", use_container_width=True)
            
            if submitted:
                handle_client_moral_submission(raison_sociale, ice, rc, forme_juridique, telephone, 
                                              email, None, adresse, rep_nom, rep_prenom, rep_cin, rep_qualite)
    
    # Liste et actions des clients
    st.markdown("---")
    st.markdown("### üóé Liste des Entreprises")
    
    # Barre de recherche
    col1, col2 = st.columns([3, 1])
    with col1:
        search_term = st.text_input(
            " Rechercher une entreprise", 
            placeholder="ID, raison sociale, ICE...",
            key="search_moral"
        )
    with col2:
        refresh_btn = st.button("‚ü≤ Actualiser", use_container_width=True, key="refresh_moral")
    
    # R√©cup√©rer et afficher les clients
    try:
        if search_term and search_term.strip():
            if search_term.strip().isdigit():
                # Recherche par ID
                client_id = int(search_term.strip())
                client = get_client_by_id_safe(client_id, "moral")
                clients = [client] if client else []
            else:
                # Recherche textuelle
                clients = rechercher_clients(search_term.strip(), "moral")
        else:
            clients = safe_get_clients("moral")
        
        if not clients:
            st.info("‚ÑπÔ∏è Aucune entreprise trouv√©e")
            return
        
        # Afficher le tableau
        df = pd.DataFrame(clients)
        
        if not df.empty:
            # R√©organiser les colonnes
            columns_order = ['id', 'raison_sociale', 'ice', 'rc', 'telephone', 'email', 'forme_juridique']
            existing_columns = [col for col in columns_order if col in df.columns]
            df_display = df[existing_columns].fillna('')
            
            st.dataframe(
                df_display, 
                use_container_width=True, 
                hide_index=True,
                column_config={
                    "id": st.column_config.NumberColumn("ID", width="small"),
                    "raison_sociale": st.column_config.TextColumn("Raison Sociale", width="large"),
                    "ice": st.column_config.TextColumn("ICE", width="medium"),
                    "rc": st.column_config.TextColumn("RC", width="medium"),
                    "telephone": st.column_config.TextColumn("T√©l√©phone", width="medium"),
                    "email": st.column_config.TextColumn("Email", width="large"),
                    "forme_juridique": st.column_config.TextColumn("Forme Juridique", width="medium")
                }
            )
            
            # Actions sur les clients
            show_client_actions_enhanced(clients, "moral")
        
    except Exception as e:
        st.error(f"‚úó Erreur lors du chargement: {str(e)}")

def show_client_actions_enhanced(clients, type_client):
    """Interface d'actions am√©lior√©e inspir√©e de la gestion des contrats"""
    if not clients:
        return
        
    st.markdown("### ‚öô Actions sur les Clients")
    
    # S√©lection du client
    col1, col2, col3, col4 = st.columns([3, 1, 1, 1])
    
    with col1:
        # Cr√©er les options de s√©lection
        if type_client == "physique":
            client_options = [" S√©lectionner un client..."]
            for c in clients:
                if isinstance(c, dict):
                    nom = c.get('nom', 'N/A')
                    prenom = c.get('prenom', 'N/A')
                    cin = c.get('cin', 'N/A')
                    client_id = c.get('id', 'N/A')
                    client_options.append(f"‚ö≤‚ö≤ ID:{client_id} | {nom} {prenom} | CIN:{cin}")
        else:
            client_options = [" S√©lectionner un client..."]
            for c in clients:
                if isinstance(c, dict):
                    raison = c.get('raison_sociale', 'N/A')
                    if len(raison) > 30:
                        raison = raison[:30] + "..."
                    ice = c.get('ice', 'N/A')
                    client_id = c.get('id', 'N/A')
                    client_options.append(f"‚ö≤‚ö≤ ID:{client_id} | {raison} | ICE:{ice}")
        
        selected_index = st.selectbox(
            "Choisir un client", 
            range(len(client_options)),
            format_func=lambda x: client_options[x],
            key=f"select_client_{type_client}"
        )
    
    # Boutons d'action
    if selected_index > 0:
        # Extraire l'ID du client s√©lectionn√©
        selected_text = client_options[selected_index]
        client_id = int(selected_text.split(" | ")[0].replace("‚ö≤‚ö≤ ID:", "").replace("‚ö≤‚ö≤ ID:", ""))
        
        with col2:
            if st.button(" Modifier", key=f"edit_{type_client}_{client_id}", use_container_width=True):
                st.session_state['editing_client_id'] = client_id
                st.session_state['editing_client_type'] = type_client
                st.session_state['editing_action'] = 'edit'
                st.rerun()
        
        with col3:
            if st.button(" D√©tails", key=f"view_{type_client}_{client_id}", use_container_width=True):
                st.session_state['editing_client_id'] = client_id
                st.session_state['editing_client_type'] = type_client
                st.session_state['editing_action'] = 'view'
                st.rerun()
        
        with col4:
            if st.button(" Supprimer", key=f"delete_{type_client}_{client_id}", use_container_width=True):
                st.session_state['editing_client_id'] = client_id
                st.session_state['editing_client_type'] = type_client
                st.session_state['editing_action'] = 'delete'
                st.rerun()

def handle_client_physique_submission(nom, prenom, cin, telephone, sexe, email, date_naissance, adresse):
    """G√©rer la soumission du formulaire client physique"""
    try:
        # Validation
        erreurs = []
        
        if not nom or not nom.strip():
            erreurs.append("‚ö†Ô∏è Le nom est obligatoire")
        elif len(nom.strip()) < 2:
            erreurs.append("‚ö†Ô∏è Le nom doit contenir au moins 2 caract√®res")
            
        if not prenom or not prenom.strip():
            erreurs.append("‚ö†Ô∏è Le pr√©nom est obligatoire")
        elif len(prenom.strip()) < 2:
            erreurs.append("‚ö†Ô∏è Le pr√©nom doit contenir au moins 2 caract√®res")
            
        if not cin or not cin.strip():
            erreurs.append("‚ö†Ô∏è La CIN est obligatoire")
        elif not valider_cin(cin.strip()):
            erreurs.append("‚ö†Ô∏è Format CIN invalide")
            
        if not telephone or not telephone.strip():
            erreurs.append("‚ö†Ô∏è Le t√©l√©phone est obligatoire")
        elif len(telephone.strip()) < 10:
            erreurs.append("‚ö†Ô∏è Le num√©ro de t√©l√©phone doit contenir au moins 10 chiffres")
            
        if email and email.strip() and not valider_email(email.strip()):
            erreurs.append("‚ö†Ô∏è Format email invalide")
        
        if erreurs:
            for erreur in erreurs:
                st.error(erreur)
            return
        
        # Pr√©parer les donn√©es
        client_data = {
            'nom': nom.strip().title(),
            'prenom': prenom.strip().title(),
            'cin': cin.strip().upper(),
            'telephone': telephone.strip(),
            'sexe': sexe if sexe else '',
            'email': email.strip().lower() if email and email.strip() else '',
            'adresse': adresse.strip() if adresse and adresse.strip() else '',
            'date_naissance': str(date_naissance) if date_naissance else ''
        }
        
        # Supprimer les valeurs vides
        client_data = {k: v for k, v in client_data.items() if v != ''}
        
        # Ajouter le client
        with st.spinner("Enregistrement en cours..."):
            if ajouter_client(client_data, "physique"):
                st.success("‚úÖ Client ajout√© avec succ√®s !")
                time.sleep(1)
                st.rerun()
            else:
                st.error("‚úó Erreur lors de l'ajout. La CIN est peut-√™tre d√©j√† utilis√©e.")
                
    except Exception as e:
        st.error(f"‚úó Erreur lors de l'ajout: {str(e)}")

def handle_client_moral_submission(raison_sociale, ice, rc, forme_juridique, telephone, email, 
                                  date_creation_entreprise, adresse, rep_nom, rep_prenom, rep_cin, rep_qualite):
    """G√©rer la soumission du formulaire client moral"""
    try:
        # Validation
        erreurs = []
        
        if not raison_sociale or not raison_sociale.strip():
            erreurs.append("‚ö†Ô∏è La raison sociale est obligatoire")
        elif len(raison_sociale.strip()) < 3:
            erreurs.append("‚ö†Ô∏è La raison sociale doit contenir au moins 3 caract√®res")
            
        if not ice or not ice.strip():
            erreurs.append("‚ö†Ô∏è L'ICE est obligatoire")
        elif not valider_ice(ice.strip()):
            erreurs.append("‚ö†Ô∏è Format ICE invalide")
            
        if not telephone or not telephone.strip():
            erreurs.append("‚ö†Ô∏è Le t√©l√©phone est obligatoire")
        elif len(telephone.strip()) < 10:
            erreurs.append("‚ö†Ô∏è Le num√©ro de t√©l√©phone doit contenir au moins 10 chiffres")
            
        if email and email.strip() and not valider_email(email.strip()):
            erreurs.append("‚ö†Ô∏è Format email invalide")
            
        if rep_cin and rep_cin.strip() and not valider_cin(rep_cin.strip()):
            erreurs.append("‚ö†Ô∏è Format CIN du repr√©sentant invalide")
        
        if erreurs:
            for erreur in erreurs:
                st.error(erreur)
            return
        
        # Pr√©parer les donn√©es
        client_data = {
            'raison_sociale': raison_sociale.strip().title(),
            'ice': ice.strip().upper(),
            'telephone': telephone.strip(),
            'rc': rc.strip() if rc and rc.strip() else '',
            'forme_juridique': forme_juridique if forme_juridique else '',
            'email': email.strip().lower() if email and email.strip() else '',
            'adresse': adresse.strip() if adresse and adresse.strip() else '',
            'rep_nom': rep_nom.strip().title() if rep_nom and rep_nom.strip() else '',
            'rep_prenom': rep_prenom.strip().title() if rep_prenom and rep_prenom.strip() else '',
            'rep_cin': rep_cin.strip().upper() if rep_cin and rep_cin.strip() else '',
            'rep_qualite': rep_qualite.strip().title() if rep_qualite and rep_qualite.strip() else ''
        }
        
        # Supprimer les valeurs vides
        client_data = {k: v for k, v in client_data.items() if v != ''}
        
        # Ajouter le client
        with st.spinner("Enregistrement en cours..."):
            if ajouter_client(client_data, "moral"):
                st.success("‚úÖ Entreprise ajout√©e avec succ√®s !")
                time.sleep(1)
                st.rerun()
            else:
                st.error("‚úó Erreur lors de l'ajout. L'ICE est peut-√™tre d√©j√† utilis√©.")
                
    except Exception as e:
        st.error(f"‚úó Erreur inattendue: {str(e)}")

def generate_pdf_report(clients, type_client, title="Liste des Clients"):
    """G√©n√©rer un rapport PDF des clients"""
    try:
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=18)
        
        # Styles
        styles = getSampleStyleSheet()
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=18,
            spaceAfter=30,
            alignment=1,
            textColor=colors.HexColor('#667eea')
        )
        
        # Contenu du PDF
        story = []
        story.append(Paragraph(title, title_style))
        story.append(Spacer(1, 12))
        
        # Informations g√©n√©rales
        info_style = styles['Normal']
        story.append(Paragraph(f"Date de g√©n√©ration: {datetime.now().strftime('%d/%m/%Y %H:%M')}", info_style))
        story.append(Paragraph(f"Nombre total de clients: {len(clients)}", info_style))
        story.append(Paragraph(f"Type de clients: {type_client.title()}", info_style))
        story.append(Spacer(1, 20))
        
        if not clients:
            story.append(Paragraph("Aucun client √† afficher.", info_style))
        else:
            # Pr√©parer les donn√©es du tableau
            if type_client == "physique":
                headers = ['ID', 'Nom', 'Pr√©nom', 'CIN', 'T√©l√©phone', 'Email']
                data = [headers]
                for client in clients:
                    row = [
                        str(client.get('id', '')),
                        client.get('nom', ''),
                        client.get('prenom', ''),
                        client.get('cin', ''),
                        client.get('telephone', ''),
                        client.get('email', '')[:25] + '...' if client.get('email') and len(client.get('email', '')) > 25 else client.get('email', '')
                    ]
                    data.append(row)
            else:
                headers = ['ID', 'Raison Sociale', 'ICE', 'RC', 'T√©l√©phone', 'Email']
                data = [headers]
                for client in clients:
                    row = [
                        str(client.get('id', '')),
                        client.get('raison_sociale', '')[:30] + '...' if client.get('raison_sociale') and len(client.get('raison_sociale', '')) > 30 else client.get('raison_sociale', ''),
                        client.get('ice', ''),
                        client.get('rc', ''),
                        client.get('telephone', ''),
                        client.get('email', '')[:25] + '...' if client.get('email') and len(client.get('email', '')) > 25 else client.get('email', '')
                    ]
                    data.append(row)
            
            # Cr√©er le tableau
            table = Table(data)
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#667eea')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 1), (-1, -1), 10),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ]))
            
            story.append(table)
        
        # G√©n√©rer le PDF
        doc.build(story)
        buffer.seek(0)
        return buffer
        
    except Exception as e:
        st.error(f"Erreur lors de la g√©n√©ration du PDF: {str(e)}")
        return None

def export_clients_pdf():
    """Fonction pour exporter les donn√©es clients en PDF"""
    st.markdown("### üóé Export PDF des Donn√©es")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üóé Exporter Clients Physiques", use_container_width=True):
            try:
                clients = safe_get_clients("physique")
                if clients:
                    pdf_buffer = generate_pdf_report(clients, "physique", "Liste des Clients Physiques")
                    if pdf_buffer:
                        st.download_button(
                            label="‚≠≥ T√©l√©charger PDF",
                            data=pdf_buffer.getvalue(),
                            file_name=f"clients_physiques_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                            mime="application/pdf"
                        )
                        st.success("‚úÖ PDF g√©n√©r√© avec succ√®s !")
                else:
                    st.info("‚ÑπÔ∏è Aucun client physique √† exporter")
            except Exception as e:
                st.error(f"‚úó Erreur lors de l'export PDF: {str(e)}")
    
    with col2:
        if st.button("üóé Exporter Clients Moraux", use_container_width=True):
            try:
                clients = safe_get_clients("moral")
                if clients:
                    pdf_buffer = generate_pdf_report(clients, "moral", "Liste des Clients Moraux")
                    if pdf_buffer:
                        st.download_button(
                            label="‚≠≥ T√©l√©charger PDF",
                            data=pdf_buffer.getvalue(),
                            file_name=f"clients_moraux_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                            mime="application/pdf"
                        )
                        st.success("‚úÖ PDF g√©n√©r√© avec succ√®s !")
                else:
                    st.info("‚ÑπÔ∏è Aucun client moral √† exporter")
            except Exception as e:
                st.error(f"‚úó Erreur lors de l'export PDF: {str(e)}")
    
    with col3:
        if st.button("üóé Exporter Rapport Complet", use_container_width=True):
            try:
                clients_physiques = safe_get_clients("physique")
                clients_moraux = safe_get_clients("moral")
                
                if clients_physiques or clients_moraux:
                    # Cr√©er un rapport combin√©
                    buffer = io.BytesIO()
                    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=18)
                    
                    styles = getSampleStyleSheet()
                    title_style = ParagraphStyle(
                        'CustomTitle',
                        parent=styles['Heading1'],
                        fontSize=20,
                        spaceAfter=30,
                        alignment=1,
                        textColor=colors.HexColor('#667eea')
                    )
                    
                    story = []
                    story.append(Paragraph("Rapport Complet des Clients", title_style))
                    story.append(Spacer(1, 12))
                    
                    # Statistiques g√©n√©rales
                    story.append(Paragraph(f"Date de g√©n√©ration: {datetime.now().strftime('%d/%m/%Y %H:%M')}", styles['Normal']))
                    story.append(Paragraph(f"Clients physiques: {len(clients_physiques) if clients_physiques else 0}", styles['Normal']))
                    story.append(Paragraph(f"Clients moraux: {len(clients_moraux) if clients_moraux else 0}", styles['Normal']))
                    story.append(Paragraph(f"Total: {(len(clients_physiques) if clients_physiques else 0) + (len(clients_moraux) if clients_moraux else 0)}", styles['Normal']))
                    story.append(Spacer(1, 20))
                    
                    doc.build(story)
                    buffer.seek(0)
                    
                    st.download_button(
                        label="‚≠≥ T√©l√©charger Rapport PDF",
                        data=buffer.getvalue(),
                        file_name=f"rapport_clients_complet_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                        mime="application/pdf"
                    )
                    st.success("‚úÖ Rapport PDF g√©n√©r√© avec succ√®s !")
                else:
                    st.info("‚ÑπÔ∏è Aucune donn√©e √† exporter")
            except Exception as e:
                st.error(f"‚úó Erreur lors de l'export du rapport: {str(e)}")

def show():
    """Fonction principale d'affichage - VERSION FINALE CORRIG√âE"""
    apply_custom_css()
    
    # Titre principal avec style
    st.markdown("""
    <div class="title-container">
        <h1 class="title-text"> Gestion des Clients</h1>
    </div>
    """, unsafe_allow_html=True)
    
    # Menu de navigation
    menu_option = st.selectbox(
        "üóé Choisir une section",
        [ "‚ö≤‚ö≤ Gestion Clients","üóé Export PDF"],
        index=0,
        help="S√©lectionnez la section que vous souhaitez utiliser"
    )
    
    # Affichage selon la s√©lection
    if menu_option =="üóé Export PDF":
        export_clients_pdf()
    elif menu_option ==  "‚ö≤‚ö≤ Gestion Clients":
        show_stats()
        
        # Tabs pour s√©parer physiques et moraux
        tab1, tab2 = st.tabs([" Personnes Physiques", " Personnes Morales"])
        
        with tab1:
            gestion_clients_physiques()
        
        with tab2:
            gestion_clients_moraux()
    
    # Footer
    st.markdown("---")
    st.markdown(
        "<div style='text-align: center; color: #666; font-size: 0.8em;'>"
        "¬© 2025 App Domiciliation - Tous droits r√©serv√©s"
        "</div>", 
        unsafe_allow_html=True
    )

# Point d'entr√©e principal
if __name__ == "__main__":
    show()